{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/overlays/menu/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"592c0785-5d14-56d9-80ec-d9f423e0e919","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Menu\",\n  \"status\": \"stable\",\n  \"github\": \"Menu\",\n  \"figma\": \"file/VyHO1Hv1XaW1v3lE9I4PVT/Menu\",\n  \"propsOf\": \"Menu\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Menu\"), \" is a wrapper component that wraps a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MenuDisclosure\"), \" element and a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MenuList\"), \" element. When using a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Menu\"), \", the child of your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MenuDisclosure\"), \" will be rendered and, when clicked, will generate a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Popover\"), \" with your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MenuList\"), \" and its children.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Menu>\\n  <MenuDisclosure tooltip=\\\"Select your favorite kind\\\">\\n    <Button>Cheese</Button>\\n  </MenuDisclosure>\\n  <MenuList>\\n    <MenuItem icon=\\\"FavoriteOutline\\\">Gouda</MenuItem>\\n    <MenuItem icon=\\\"FavoriteOutline\\\">Swiss</MenuItem>\\n  </MenuList>\\n</Menu>\\n\")), mdx(\"h2\", null, \"useMenu\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useMenu\"), \" hook with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MenuDisclosure\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MenuList\"), \", spreading the return object as props on each.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const menu = useMenu()\\n  return (\\n    <>\\n      <MenuDisclosure tooltip=\\\"Select export format\\\" {...menu}>\\n        <Button>Export</Button>\\n      </MenuDisclosure>\\n      <MenuList {...menu}>\\n        <MenuItem icon=\\\"Mail\\\">Email</MenuItem>\\n        <MenuItem icon=\\\"Table\\\">Spreadsheet</MenuItem>\\n      </MenuList>\\n    </>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"MenuList\"), mdx(Props, {\n    of: \"MenuList\",\n    mdxType: \"Props\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MenuList\"), \" displays a list of choices.\"), mdx(\"h3\", null, \"Focus & Keyboard Controls\"), mdx(\"p\", null, \"When a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MenuList\"), \" is focused the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"up\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"down\"), \" arrow keys will move focus through the menu items within the list.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<MenuList>\\n  <MenuItem onClick={() => alert('Hello world!')}>Gouda</MenuItem>\\n  <MenuItem>Cheedar</MenuItem>\\n  <MenuItem>Swiss</MenuItem>\\n</MenuList>\\n\")), mdx(\"h3\", null, \"Customizing a MenuList\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MenuList\"), \" accepts a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"customizationProps\"), \" prop which allows for flexibly styling of the item. Below is an example of customizing the menu's display. Below is an example of all the options you can customize.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<MenuList\\n  customizationProps={{\\n    bg: palette.purple500,\\n    color: palette.purple200,\\n    fontSize: 'xlarge',\\n    iconColor: palette.purple300,\\n    iconSize: 40,\\n    marker: {\\n      color: palette.purple300,\\n      size: 10,\\n    },\\n    hover: {\\n      bg: palette.purple700,\\n      color: palette.white,\\n      iconColor: palette.purple100,\\n    },\\n    current: {\\n      bg: palette.purple200,\\n      color: palette.purple900,\\n      iconColor: palette.purple500,\\n    },\\n  }}\\n>\\n  <MenuGroup>\\n    <MenuItem\\n      href=\\\"https://en.wikipedia.org/wiki/Gouda_cheese\\\"\\n      itemRole=\\\"link\\\"\\n      icon=\\\"Home\\\"\\n    >\\n      Gouda\\n    </MenuItem>\\n    <MenuItem\\n      href=\\\"https://en.wikipedia.org/wiki/Cheddar_cheese\\\"\\n      itemRole=\\\"link\\\"\\n      icon=\\\"FavoriteOutline\\\"\\n      current\\n      currentMarker\\n      detail=\\\"Is often orange\\\"\\n    >\\n      Cheddar\\n    </MenuItem>\\n    <MenuItem\\n      itemRole=\\\"link\\\"\\n      icon=\\\"Dashboard\\\"\\n      href=\\\"https://en.wikipedia.org/wiki/Swiss_cheese`\\\"\\n    >\\n      Swiss\\n    </MenuItem>\\n  </MenuGroup>\\n</MenuList>\\n\")), mdx(\"h3\", null, \"Menu Item Spacing\"), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MenuList\"), \" accepts a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"compact\"), \" prop that will make the spacing between the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MenuItems\"), \" smaller.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<MenuList compact>\\n  <MenuItem icon=\\\"LogoRings\\\">Looker</MenuItem>\\n  <MenuItem icon=\\\"Validate\\\">Validate</MenuItem>\\n  <MenuItem icon=\\\"ChartPie\\\">Pizza</MenuItem>\\n</MenuList>\\n\")), mdx(\"h2\", null, \"MenuItem\"), mdx(Props, {\n    of: \"MenuItem\",\n    mdxType: \"Props\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MenuItem\"), \" is an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HTMLButtonElement\"), \" that supports all of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BoxProps\"), \" properties. Use this for triggering actions from with in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MenuList\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Drawer\"), \". For example, opening a modal.\"), mdx(\"p\", null, \"For accessibility reasons, if you want your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MenuItem\"), \" to link somewhere then you can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"itemRole\"), \" prop to identify it as a link.\"), mdx(\"p\", null, \"An icon can optionally be assigned to each item via the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"icon\"), \" property.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<MenuList>\\n  <MenuItem>Home</MenuItem>\\n  <MenuItem icon=\\\"Home\\\">Home</MenuItem>\\n  <MenuItem\\n    itemRole=\\\"link\\\"\\n    target=\\\"_blank\\\"\\n    icon=\\\"Public\\\"\\n    href=\\\"https://google.com\\\"\\n  >\\n    Away\\n  </MenuItem>\\n</MenuList>\\n\")), mdx(\"h3\", null, \"Icon Support\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<MenuList>\\n  <MenuItem icon=\\\"LogoRings\\\">Looker</MenuItem>\\n  <MenuItem icon=\\\"Validate\\\">Validate</MenuItem>\\n  <MenuItem icon=\\\"ChartPie\\\">Pizza</MenuItem>\\n</MenuList>\\n\")), mdx(\"h3\", null, \"Detail Text\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"detail\"), \" prop to provide explanatory detail to a given item.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"    <MenuItem detail=\\\"Get regular updates\\\">Schedule</MenuItem>\\n    <MenuItem icon=\\\"Beaker\\\" detail=\\\"Try the newest toys!\\\">\\n      Labs\\n    </MenuItem>\\n\")), mdx(\"h3\", null, \"Digital Marketing Style Menu\"), mdx(\"p\", null, \"It's possible to selectively customize only select pieces of a menu list as well, like in this example below.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<MenuList\\n  customizationProps={{\\n    bg: palette.charcoal100,\\n    iconColor: palette.charcoal800,\\n    current: {\\n      bg: palette.charcoal200,\\n      iconColor: palette.purple500,\\n    },\\n    hover: {\\n      iconColor: palette.purple500,\\n    },\\n  }}\\n>\\n  <MenuGroup label=\\\"GOOGLE ADS\\\" labelProps={{ bg: palette.charcoal100 }}>\\n    <MenuItem icon=\\\"Home\\\">Gouda</MenuItem>\\n    <MenuItem icon=\\\"FavoriteOutline\\\" current detail=\\\"Is often orange\\\">\\n      Cheddar\\n    </MenuItem>\\n    <MenuItem icon=\\\"Dashboard\\\">Swiss</MenuItem>\\n  </MenuGroup>\\n</MenuList>\\n\")), mdx(\"h2\", null, \"MenuGroup\"), mdx(Props, {\n    of: \"MenuItem\",\n    mdxType: \"Props\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MenuGroup\"), \" is a way to group together similar collections of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MenuItem\"), \"s.\"), mdx(\"p\", null, \"It supports an optional \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"label\"), \" prop to place a heading above the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MenuItem\"), \"s. When placed within a scrolling container the label will stick to the top edge while the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MenuGroup\"), \" is visible. Look at the \\\"Menu + Drawer\\\" example above and try scrolling.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"labelProps\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"labelStyles\"), \" can be used to apply styling to the label.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<MenuList>\\n  <MenuGroup>\\n    <MenuItem icon=\\\"LogoRings\\\">Looker</MenuItem>\\n    <MenuItem icon=\\\"Validate\\\">Validate</MenuItem>\\n    <MenuItem icon=\\\"ChartPie\\\">Pizza!</MenuItem>\\n  </MenuGroup>\\n  <MenuGroup label=\\\"Cheeses\\\">\\n    <MenuItem icon=\\\"FavoriteOutline\\\">Cheddar</MenuItem>\\n    <MenuItem icon=\\\"FavoriteOutline\\\">Mozerella</MenuItem>\\n    <MenuItem icon=\\\"FavoriteOutline\\\">Swiss</MenuItem>\\n  </MenuGroup>\\n  <MenuGroup label=\\\"Meats\\\">\\n    <MenuItem icon=\\\"FavoriteOutline\\\">Sausage</MenuItem>\\n    <MenuItem icon=\\\"FavoriteOutline\\\">Pepperoni</MenuItem>\\n    <MenuItem icon=\\\"FavoriteOutline\\\">Salami</MenuItem>\\n  </MenuGroup>\\n  <MenuGroup label=\\\"Vegetables\\\">\\n    <MenuItem icon=\\\"FavoriteOutline\\\">Onion</MenuItem>\\n    <MenuItem icon=\\\"FavoriteOutline\\\">Mushroom</MenuItem>\\n    <MenuItem icon=\\\"FavoriteOutline\\\">Peppers</MenuItem>\\n  </MenuGroup>\\n</MenuList>\\n\")), mdx(\"h2\", null, \"MenuSearch\"), mdx(Props, {\n    of: \"MenuItem\",\n    mdxType: \"Props\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"  <MenuSearch />\\n  <Divider my=\\\"medium\\\" />\\n  <MenuSearch value=\\\"Stuff\\\" summary=\\\"Faux results\\\" />\\n  <Divider my=\\\"medium\\\" />\\n  <MenuSearch value=\\\"Stuff\\\" hideControls />\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const menuRef = React.useRef(null)\\n  const items = ['a', 'b', 'c', 'd', 'e']\\n  const [keywords, setKeywords] = React.useState('')\\n  const onChange = e => setKeywords(e.currentTarget.value)\\n  const menu = (\\n    <React.Fragment>\\n      <MenuSearch\\n        placeholder=\\\"Filter menu items\\\"\\n        summary=\\\"33 matches\\\"\\n        value={keywords}\\n        onChange={onChange}\\n        menuRef={menuRef}\\n      />\\n      <ModalContent innerProps={{ p: 'none' }}>\\n        <MenuList>\\n          <MenuGroup label=\\\"Spacing\\\">\\n            {items.map(item => (\\n              <MenuItem itemRole=\\\"link\\\" href={`#${item}`} key={item}>\\n                Example Link {item.toUpperCase()}\\n              </MenuItem>\\n            ))}\\n          </MenuGroup>\\n          <MenuGroup label=\\\"Spacing\\\">\\n            {items.map(item => (\\n              <MenuItem detail={`Detail ${item}`} key={item}>\\n                Example Item {item.toUpperCase()}\\n              </MenuItem>\\n            ))}\\n          </MenuGroup>\\n          <MenuGroup>\\n            <MenuItem icon=\\\"Beaker\\\">Scary Stuff</MenuItem>\\n          </MenuGroup>\\n        </MenuList>\\n      </ModalContent>\\n    </React.Fragment>\\n  )\\n  return (\\n    <DrawerManager content={menu}>\\n      {onClick => (\\n        <Button variant=\\\"outline\\\" onClick={onClick} iconAfter=\\\"ArrowDropDown\\\">\\n          Drawer w/ Searchable Menu\\n        </Button>\\n      )}\\n    </DrawerManager>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":"file/VyHO1Hv1XaW1v3lE9I4PVT/Menu","github":"Menu","propsOf":"Menu","status":"stable","title":"Menu"},"tableOfContents":{"items":[{"url":"#usemenu","title":"useMenu"},{"url":"#menulist","title":"MenuList"},{"url":"#menuitem","title":"MenuItem"},{"url":"#menugroup","title":"MenuGroup"},{"url":"#menusearch","title":"MenuSearch"}]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"592c0785-5d14-56d9-80ec-d9f423e0e919"}}}