{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/forms/slider/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"590a7ff7-6ebd-5116-ac48-23d2f76a1b64","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Slider\",\n  \"propsOf\": \"Slider\",\n  \"github\": \"Form/Inputs/Slider/Slider\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Default Slider\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Slider />\"), \" component renders a single slider element on the page, with no accompanying label.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Slider />\\n\")), mdx(\"h3\", null, \"Value, Min, Max and step\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Slider />\"), \" component accepts a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" property, allowing the user to set the initial value at which the slider is initialized.\\nIt also accepts a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"min\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"max\"), \" value, as well as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"step\"), \" to set the granularity between values.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const [value, setValue] = React.useState(11)\\n  const onChange = event => setValue(event.target.value)\\n  return (\\n    <div>\\n      <Slider min={1} max={11} value={value} step={1} onChange={onChange} />\\n      <Text>Volume {value}</Text>\\n    </div>\\n  )\\n}\\n\")), mdx(\"h3\", null, \"Disabled Property\"), mdx(\"p\", null, \"Use the disable property to gray out the Input, making it a fixed value.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Slider disabled />\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":null,"github":"Form/Inputs/Slider/Slider","propsOf":"Slider","status":null,"title":"Slider"},"tableOfContents":{}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"590a7ff7-6ebd-5116-ac48-23d2f76a1b64"}}}