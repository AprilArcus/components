{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/forms/select/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"bf43c736-42b0-52e1-acc8-d9d80a9a8cfb","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Select\",\n  \"figma\": \"file/2MG6DoSjk4IaLnjjFCnKFf/Forms\",\n  \"github\": \"Form/Inputs/Select/Select\",\n  \"propsOf\": \"Select\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Select />\"), \" component renders a single select element on the page, with no accompanying label. It is generally used to construct higher-order components like the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldText />\"), \". If you are building a form, you probably want to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldSelect />\"), \" instead as it provides label and validation support.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Flex justifyContent=\\\"space-between\\\">\\n  <Select\\n    options={[\\n      { value: 'cheddar', label: 'Cheddar' },\\n      { value: 'gouda', label: 'Gouda' },\\n      { value: 'swiss', label: 'Swiss' },\\n    ]}\\n  />\\n  <Select\\n    options={[\\n      { value: 'cheddar', label: 'Cheddar' },\\n      { value: 'gouda', label: 'Gouda' },\\n      { value: 'swiss', label: 'Swiss' },\\n    ]}\\n    value=\\\"gouda\\\"\\n  />\\n  <Select placeholder=\\\"awesome!\\\" />\\n  <Select\\n    value=\\\"Some Value\\\"\\n    options={[\\n      { value: '1', label: 'thing' },\\n      { value: 'Some Value', label: \\\"Some Value's Label\\\" },\\n      { value: '2', label: 'other' },\\n    ]}\\n  />\\n</Flex>\\n\")), mdx(\"h2\", null, \"Option Groups\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Select\\n  options={[\\n    {\\n      key: 'Italian',\\n      options: [\\n        { value: 'asiago', label: 'Asiago' },\\n        { value: 'ricotta', label: 'Ricotta' },\\n        { value: 'grana', label: 'Grana' },\\n      ],\\n    },\\n    {\\n      key: 'American',\\n      options: [\\n        { value: 'american', label: 'American (not actually cheese)' },\\n        { value: 'colby-jack', label: 'Colby-Jack' },\\n        { value: 'swiss', label: 'Swiss' },\\n        { value: 'vermont', label: 'Vermont' },\\n      ],\\n    },\\n  ]}\\n  value=\\\"american\\\"\\n/>\\n\")), mdx(\"h2\", null, \"Name and ID\"), mdx(\"p\", null, \"A name and ID can be specified in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Select />\"), \" component. Names are important if the input is used in the context of a form, in which case a name is required for the value of the input to be captured.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Select\\n  name=\\\"someName\\\"\\n  id=\\\"someId\\\"\\n  options={[\\n    { value: 'cheddar', label: 'Cheddar' },\\n    { value: 'gouda', label: 'Gouda' },\\n    { value: 'swiss', label: 'Swiss' },\\n  ]}\\n/>\\n\")), mdx(\"h2\", null, \"Disabled Property\"), mdx(\"p\", null, \"Use the disable property to make an input field uneditable.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"    <Select\\n      disabled\\n      options={[\\n        { value: 'cheddar', label: 'Cheddar' },\\n        { value: 'gouda', label: 'Gouda' },\\n        { value: 'swiss', label: 'Swiss' },\\n      ]}\\n    />\\n    <Select\\n      value=\\\"gouda\\\"\\n      disabled\\n      options={[\\n        { value: 'cheddar', label: 'Cheddar' },\\n        { value: 'gouda', label: 'Gouda' },\\n        { value: 'swiss', label: 'Swiss' },\\n      ]}\\n      ml=\\\"large\\\"\\n    />\\n\")), mdx(\"h2\", null, \"Placeholders & includeBlank\"), mdx(\"p\", null, \"Placeholders are used to give a hint to the user of the expected value for the input. They should not be used as a complete replacement of labels. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"includeBlank\"), \" property (default: true) includes an inital option without a value.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"    <Select\\n      placeholder=\\\"Select your cheese of choice...\\\"\\n      options={[\\n        { value: 'cheddar', label: 'Cheddar' },\\n        { value: 'gouda', label: 'Gouda' },\\n        { value: 'swiss', label: 'Swiss' },\\n      ]}\\n    />\\n    <Select\\n      includeBlank={false}\\n      options={[\\n        { value: 'cheddar', label: 'Cheddar' },\\n        { value: 'gouda', label: 'Gouda' },\\n        { value: 'swiss', label: 'Swiss' },\\n      ]}\\n      ml=\\\"large\\\"\\n    />\\n\")), mdx(\"h2\", null, \"ReadOnly Property\"), mdx(\"p\", null, \"As the name suggests, \\\"readOnly\\\" makes the text uneditable.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Select\\n  value=\\\"gouda\\\"\\n  readOnly\\n  options={[\\n    { value: 'cheddar', label: 'Cheddar' },\\n    { value: 'gouda', label: 'Gouda' },\\n    { value: 'swiss', label: 'Swiss' },\\n  ]}\\n/>\\n\")), mdx(\"h2\", null, \"Required Property\"), mdx(\"p\", null, \"When set for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Select />\"), \" in the context of a form, the input field must be filled out before submitting the form.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<form>\\n  <Select\\n    required\\n    options={[\\n      { value: 'cheddar', label: 'Cheddar' },\\n      { value: 'gouda', label: 'Gouda' },\\n      { value: 'swiss', label: 'Swiss' },\\n    ]}\\n  />\\n  <br />\\n  <br />\\n  <Button>Submit</Button>\\n</form>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":"file/2MG6DoSjk4IaLnjjFCnKFf/Forms","github":"Form/Inputs/Select/Select","propsOf":"Select","status":null,"title":"Select"},"tableOfContents":{"items":[{"url":"#option-groups","title":"Option Groups"},{"url":"#name-and-id","title":"Name and ID"},{"url":"#disabled-property","title":"Disabled Property"},{"url":"#placeholders--includeblank","title":"Placeholders & includeBlank"},{"url":"#readonly-property","title":"ReadOnly Property"},{"url":"#required-property","title":"Required Property"}]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"bf43c736-42b0-52e1-acc8-d9d80a9a8cfb"}}}