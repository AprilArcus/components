{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/modals/dialog/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"8e7349e4-cd4f-5b48-9de1-7f51267ded92","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Dialog\",\n  \"propsOf\": \"Dialog\",\n  \"github\": \"Modal/Dialog/Dialog\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Banner, {\n    intent: \"warning\",\n    mdxType: \"Banner\"\n  }, \"Dialog provides a general purpose (empty) modal overlay. Most likely you'll you'll find \", mdx(\"a\", {\n    href: \"./confirm\"\n  }, \"Confirm\"), \" more useful to drive specific user action.\"), mdx(\"p\", null, \"Dialogs inform users about a task and can contain critical information, require decisions, or involve multiple tasks.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dialog\"), \" requires that the developer manages the whether the Dialog is visible or not by assigning \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \" to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isOpen\"), \" prop\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const { value, setOn, setOff } = useToggle()\\n  return (\\n    <div>\\n      <Dialog isOpen={value} onClose={() => setOff()}>\\n        <ModalContent>\\n          <Paragraph>Some content inside the Dialog</Paragraph>\\n          <Button>A button too!</Button>\\n        </ModalContent>\\n      </Dialog>\\n      <Button onClick={() => setOn()}>Open Dialog</Button>\\n    </div>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"DialogManager\"), mdx(\"p\", null, \"DialogManager gives an easy way to compose a Dialog without the need to manage state.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<DialogManager\\n  content={\\n    <ModalContent>\\n      <Paragraph>Some content inside the Dialog</Paragraph>\\n      <Button>A button too!</Button>\\n    </ModalContent>\\n  }\\n>\\n  {onClick => <Button onClick={onClick}>Open Dialog </Button>}\\n</DialogManager>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":null,"github":"Modal/Dialog/Dialog","propsOf":"Dialog","status":null,"title":"Dialog"},"tableOfContents":{"items":[{"url":"#dialogmanager","title":"DialogManager"}]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"8e7349e4-cd4f-5b48-9de1-7f51267ded92"}}}