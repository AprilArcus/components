{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/modals/confirm/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"0c33e31c-8f86-51cf-868b-f339cc3c5e23","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Confirm\",\n  \"propsOf\": \"Confirm\",\n  \"github\": \"Modal/Dialog/DialogManager\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"useConfirm\"), mdx(\"p\", null, \"A custom hook that returns the opener function and rendered confirmation dialog. The following example is a complex usage to illustrate how the opener can be called from another hook.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const [keyPressed, setKeypressed] = React.useState('none')\\n  function handleConfirm(close) {\\n    alert('You deleted it')\\n    close()\\n  }\\n  const [confirmation, confirm] = useConfirm({\\n    confirmLabel: 'Yes, Delete',\\n    buttonColor: 'danger',\\n    title: `You pressed ${keyPressed}`,\\n    message: 'Are you sure you want to delete it?',\\n    onConfirm: handleConfirm,\\n  })\\n  React.useEffect(() => {\\n    function onKeydown(event) {\\n      const key = event.keyCode || event.charCode\\n      if (key === 8 || key === 46) {\\n        setKeypressed(key === 8 ? 'Backspace' : 'Delete')\\n        confirm()\\n      }\\n    }\\n    window.addEventListener('keydown', onKeydown)\\n    return () => {\\n      window.removeEventListener('keydown', onKeydown)\\n    }\\n  }, [confirm])\\n  return (\\n    <Paragraph>\\n      {confirmation}\\n      To trigger a confirmation dialog, hit the delete or backspace key.\\n    </Paragraph>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Confirm\"), mdx(\"p\", null, \"A render-props version, for use in class components.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Confirm\\n  title=\\\"Confirm Something\\\"\\n  message=\\\"Is this what you want to do?\\\"\\n  onConfirm={close => {\\n    alert('You did something')\\n    close()\\n  }}\\n>\\n  {open => <Button onClick={open}>Do Something</Button>}\\n</Confirm>\\n\")), mdx(\"h2\", null, \"Rich Message Content\"), mdx(\"p\", null, \"In addition to strings, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Confirm\"), \" also supports passing in a react component for the message content. This allows for richer formatting and fine-grained control of the message.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  /*\\n   * import { Confirm, Flex, FlexItem, Icon, Paragraph, Link } from '@looker/components'\\n   * import styled from 'styled-components'\\n   */\\n\\n  const RichMessage = () => (\\n    <Flex>\\n      <FlexItem>\\n        <Icon\\n          mr=\\\"large\\\"\\n          name=\\\"CircleInfoOutline\\\"\\n          size=\\\"80px\\\"\\n          color=\\\"palette.purple400\\\"\\n        />\\n      </FlexItem>\\n      <FlexItem>\\n        <Paragraph>\\n          Canadians say \\\"sorry\\\" so often that{' '}\\n          <strong>in 2009 a law was passed</strong> declaring that an apology\\n          cannot be used as an admission of guilt.\\n        </Paragraph>\\n        <Paragraph mt=\\\"xsmall\\\" variant=\\\"subdued\\\" fontSize=\\\"small\\\">\\n          <cite>\\n            SOURCE:{' '}\\n            <Link\\n              href=\\\"https://www.theloop.ca/canadians-love-to-say-sorry-so-much-we-had-to-make-this-law/\\\"\\n              target=\\\"_blank\\\"\\n            >\\n              the loop\\n            </Link>\\n          </cite>\\n        </Paragraph>\\n      </FlexItem>\\n    </Flex>\\n  )\\n\\n  return (\\n    <Confirm\\n      title=\\\"Did you know?\\\"\\n      message={<RichMessage />}\\n      onConfirm={close => {\\n        alert('Now you know.')\\n        close()\\n      }}\\n    >\\n      {open => <Button onClick={open}>Do something fancy</Button>}\\n    </Confirm>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":null,"github":"Modal/Dialog/DialogManager","propsOf":"Confirm","status":null,"title":"Confirm"},"tableOfContents":{"items":[{"url":"#useconfirm","title":"useConfirm"},{"url":"#confirm","title":"Confirm"},{"url":"#rich-message-content","title":"Rich Message Content"}]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"0c33e31c-8f86-51cf-868b-f339cc3c5e23"}}}