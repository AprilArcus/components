{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/modals/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"92521d1b-eb89-5f00-a88c-204682b3f238","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Modal\",\n  \"github\": \"Modal\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Modals are temporary overlays that offer contextual information or require user input/confirmation. Modals block interactions with the application until being explicitly dismissed. They can be used for lightweight tasks or hosting heavier temporary content.\"), mdx(\"p\", null, \"At its most basic, a Modal is a container for content that should sit above or aside the primary content.\"), mdx(\"p\", null, \"Currently we provide two kinds of Modals: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/src-documentation-components-dialog\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Dialog\")), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/src-documentation-components-drawer\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Drawer\")), \". These components can used on their own or in combination with layout helpers designed expressly for use with modals, specifically: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/#!/ModalHeader\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"ModalHeader\")), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/#!/ModalContent\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"ModalContent\")), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/#!/ModalFooter\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"ModalFooter\")), \".\"), mdx(\"p\", null, \"Modals can have a single child. If a child is specified it will automatically be assigned on an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClick\"), \" event that triggers the modal to open.\"), mdx(\"h2\", null, \"Styling\"), mdx(\"p\", null, \"Modals are assembled of two primary pieces a Backdrop (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ModalBackdrop\"), \") and a Surface (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SurfaceBase\"), \").\"), mdx(\"h3\", null, \"ModalBackdrop\"), mdx(\"p\", null, \"This provides the backdrop behind Modal containers. It can be customized via the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"backdrop\"), \" property. These must be a CSSProperty compatible key / value paired object.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<DialogManager\\n  backdrop={{ background: 'purple', opacity: 1 }}\\n  content={\\n    <React.Fragment>\\n      Stuff and text <a href=\\\"#\\\">Focus attention here...</a>\\n    </React.Fragment>\\n  }\\n>\\n  {onClick => <Button onClick={onClick}>Purple Backdrop</Button>}\\n</DialogManager>\\n\")), mdx(\"h3\", null, \"ModalSurface\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ModalSurface\"), \" provides the container that contains the content. It can be customized via the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"surfaceStyles\"), \" property. These must be a CSSProperty compatible key / value paired object.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<DialogManager\\n  surfaceStyles={{ background: 'pink', borderRadius: 0, padding: '3rem' }}\\n  content={\\n    <React.Fragment>\\n      Stuff and text <a href=\\\"#\\\">Focus attention here...</a>\\n    </React.Fragment>\\n  }\\n>\\n  {onClick => <Button onClick={onClick}>Pink Surface, No Radiae</Button>}\\n</DialogManager>\\n\")), mdx(\"h2\", null, \"ModalContext\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ModalContext\"), \" is a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reactjs.org/docs/context.html\"\n  }), \"React Context\"), \" that provides access to functionality without requiring the developer to explicitly manage the Modal's state. Currently the context simply provides access to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"closeModal()\"), \" method of the Modal.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }), \"import React, { useContext } from 'react'\\nimport { Button, ModalContext } from '@looker/components'\\n\\nexport function ModalContextDemo() {\\n  return (\\n    <ModalContext.Consumer>\\n      {({ closeModal }) => <Button onClick={closeModal}>Close!</Button>}\\n    </ModalContext.Consumer>\\n  )\\n}\\n\\nexport function ModalUseContextDemo() {\\n  const { closeModal } = useContext(ModalContext)\\n  return <Button onClick={closeModal}>Close!</Button>\\n}\\n\")), mdx(\"h2\", null, \"ModalContent\"), mdx(Props, {\n    of: \"ModalContent\",\n    mdxType: \"Props\"\n  }), mdx(\"p\", null, \"Using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ModalContent\"), \" component quickly gives your content consistent spacing inside a modal component as well as managing overflow of content of the dialog is taller than the viewport.\"), mdx(\"p\", null, \"ModalContent supports all \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/src-documentation-components-box\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Box\")), \" properties.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Box height=\\\"10rem\\\" display=\\\"flex\\\" bg=\\\"white\\\" p=\\\"large\\\">\\n  <ModalContent>\\n    <Box height=\\\"2rem\\\" bg=\\\"rebeccapurple\\\" />\\n    <Paragraph>Scroll down here...</Paragraph>\\n  </ModalContent>\\n</Box>\\n\")), mdx(\"h3\", null, \"Content Overflows\"), mdx(\"p\", null, \"If content overflows the component's height an visual indicator of content that extends beyond the visible edges is added (border on top and shadow on the bottom).\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Box height=\\\"10rem\\\" display=\\\"flex\\\" bg=\\\"white\\\" p=\\\"large\\\">\\n  <ModalContent>\\n    <Box height=\\\"6rem\\\" bg=\\\"rebeccapurple\\\" />\\n    <Paragraph>Scroll down here...</Paragraph>\\n  </ModalContent>\\n</Box>\\n\")), mdx(\"h2\", null, \"ModalHeader\"), mdx(Props, {\n    of: \"ModalHeader\",\n    mdxType: \"Props\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ModalHeader\"), \" is attached to the top of modal and provides a button to close the containing modal. Uses the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ModalContext\"), \" to get access to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"closeModal\"), \" callback.\"), mdx(\"p\", null, \"ModalHeader supports all \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/src-documentation-components-box\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Box\")), \" properties.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<ModalHeader>\\n  <Heading>This is a ModalHeader</Heading>\\n</ModalHeader>\\n\")), mdx(\"h2\", null, \"ModalFooter\"), mdx(Props, {\n    of: \"ModalFooter\",\n    mdxType: \"Props\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ModalFooter\"), \" is attached to the bottom of modal. Generally, the terminal action for a modal as well as an option to abandon the process done via the modal are available within this component. This component is generally used in combination with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ModalContext.Provider\"), \" to get access to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ModalContext.closeModal()\"), \" method.\"), mdx(\"p\", null, \"ModalFooter supports all \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/src-documentation-components-box\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Box\")), \" properties.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"    <ModalFooter>\\n      <Button>Save Changes</Button>\\n    </ModalFooter>\\n    <Divider />\\n    <ModalFooter>\\n      <Button>Save Changes</Button>\\n      <ButtonTransparent>Cancel</ButtonTransparent>\\n    </ModalFooter>\\n    <Divider />\\n    <ModalFooter\\n      secondary={\\n        <Button variant=\\\"outline\\\" iconBefore=\\\"Plus\\\">\\n          Create Item\\n        </Button>\\n      }\\n    >\\n      <Button>Save Changes</Button>\\n      <ButtonTransparent>Cancel</ButtonTransparent>\\n    </ModalFooter>\\n    <Divider />\\n    <ModalFooter\\n      secondary={\\n        <React.Fragment>\\n          <Button variant=\\\"outline\\\" iconBefore=\\\"Plus\\\">\\n            Create Item\\n          </Button>\\n          <Button variant=\\\"outline\\\" iconBefore=\\\"Plus\\\">\\n            Yet Another\\n          </Button>\\n        </React.Fragment>\\n      }\\n    >\\n      <Button>Save Changes</Button>\\n      <ButtonTransparent>Cancel</ButtonTransparent>\\n    </ModalFooter>\\n    <Divider />\\n    <ModalContent>\\n      <Box bg=\\\"lavender\\\" p=\\\"medium\\\">\\n        Example content\\n      </Box>\\n    </ModalContent>\\n    <ModalFooter>\\n      <Button size=\\\"xsmall\\\">Save Changes</Button>\\n      <ButtonTransparent size=\\\"xsmall\\\">\\n        Cancel\\n      </ButtonTransparent>\\n    </ModalFooter>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":null,"github":"Modal","propsOf":null,"status":null,"title":"Modal"},"tableOfContents":{"items":[{"url":"#styling","title":"Styling"},{"url":"#modalcontext","title":"ModalContext"},{"url":"#modalcontent","title":"ModalContent"},{"url":"#modalheader","title":"ModalHeader"},{"url":"#modalfooter","title":"ModalFooter"}]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"92521d1b-eb89-5f00-a88c-204682b3f238"}}}