{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/content/avatar/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"6293d8b5-ca18-5c50-9cde-2bc03b548dc2","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Avatar\",\n  \"propsOf\": \"Avatar\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Avatar\"), \" is most often used to identify individual users or groups. Lens offers three variations on it:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AvatarUser\"), \" displays the profile image, if there is one available, or user's initials.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AvatarIcon\"), \" displays an icon as the avatar, which can be selected with the icon prop.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AvatarCombo\"), \" displayed AvatarUser or AvatarIcon and a badge connected to it.\")), mdx(\"h2\", null, \"AvatarUser\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const goodData = {\\n    avatar_url:\\n      'https://media.istockphoto.com/vectors/noisy-glitch-pixelated-seamless-pattern-vector-id1051777344',\\n    first_name: 'John',\\n    id: 1,\\n    last_name: 'Smith',\\n  }\\n  const noImage = {\\n    avatar_url:\\n      'https://gravatar.lookercdn.com/avatar/e8ebbdf1a64411721503995731?s=156&d=blank',\\n    first_name: 'John',\\n    id: 2,\\n    last_name: 'Smith',\\n  }\\n  return (\\n    <>\\n      <AvatarUser m=\\\"medium\\\" user={goodData} />\\n      <AvatarUser m=\\\"medium\\\" user={noImage} />\\n    </>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"AvatarIcon\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<AvatarIcon m=\\\"medium\\\" />\\n<AvatarIcon m=\\\"medium\\\" icon=\\\"Code\\\" />\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"size\"), \": small || medium || large - large being the default.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If you choose the small size for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AvatarUser\"), \", it will only render the first initial.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"color\"), \": default value is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"#4F2ABA\"), \" but that can be changed by the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"color\"), \" prop.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const data = {\\n    avatar_url:\\n      'https://gravatar.lookercdn.com/avatar/e8ebbdf1a64411721503995731?s=156&d=blank',\\n    first_name: 'John',\\n    id: 3,\\n    last_name: 'Smith',\\n  }\\n  return (\\n    <>\\n      <AvatarIcon m=\\\"medium\\\" size=\\\"small\\\" />\\n      <AvatarIcon m=\\\"medium\\\" icon=\\\"LogoRings\\\" color=\\\"#FF4500\\\" size=\\\"medium\\\" />\\n      <AvatarIcon m=\\\"medium\\\" icon=\\\"Code\\\" color=\\\"#6495ED\\\" />\\n      <AvatarUser m=\\\"medium\\\" color=\\\"#6495ED\\\" user={data} />\\n      <AvatarUser m=\\\"medium\\\" color=\\\"#FF4500\\\" user={data} size=\\\"medium\\\" />\\n      <AvatarUser m=\\\"medium\\\" user={data} size=\\\"small\\\" />\\n    </>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"AvatarCombo\"), mdx(\"p\", null, \"It's a combination of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AvatarUser\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AvatarIcon\"), \". Avatar provides three options to identify a user: a user profile image, user initials, or an SVG icon. If no data is passed as the user the Avatar Identity will be set to to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"users\"), \" as on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AvatarIcon\"), \" case. As for the badge on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AvatarCombo\"), \" the icon has no default value. So it has to be set when the Avatar is created.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const data = {\\n    avatar_url:\\n      'https://media.istockphoto.com/vectors/noisy-glitch-pixelated-seamless-pattern-vector-id1051777344',\\n    first_name: 'John',\\n    id: 3,\\n    last_name: 'Smith',\\n  }\\n\\n  const noImageData = {\\n    avatar_url:\\n      'https://gravatar.lookercdn.com/avatar/e8ebbdf1a64411721503995731?s=156&d=blank',\\n    first_name: 'John',\\n    id: 2,\\n    last_name: 'Smith',\\n  }\\n  return (\\n    <>\\n      <AvatarCombo m=\\\"medium\\\" user={data} badge=\\\"LogoRings\\\" />\\n      <AvatarCombo m=\\\"medium\\\" user={noImageData} icon=\\\"Code\\\" badge=\\\"Code\\\" />\\n      <AvatarCombo m=\\\"medium\\\" color=\\\"#6495ED\\\" badge=\\\"Beaker\\\" />\\n      <AvatarCombo m=\\\"medium\\\" color=\\\"#FF4500\\\" badge=\\\"Code\\\" />\\n    </>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":null,"github":null,"propsOf":"Avatar","status":null,"title":"Avatar"},"tableOfContents":{"items":[{"url":"#avataruser","title":"AvatarUser"},{"url":"#avataricon","title":"AvatarIcon"},{"url":"#avatarcombo","title":"AvatarCombo"}]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"6293d8b5-ca18-5c50-9cde-2bc03b548dc2"}}}