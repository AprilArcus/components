{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/actions/icon-button/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"8e3efeef-4b44-5011-be2f-1886fa5fa2b2","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"IconButton\",\n  \"status\": \"stable\",\n  \"github\": \"Button/IconButton\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IconButton\"), \"'s are used when you need an icon to trigger an action, such as showing a dialog or deleting an item. Icon buttons require a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"label\"), \" that describes it's action. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"label\"), \" should be descriptive and succinct.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IconButton\"), \"'s come in five sizes: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"xxsmall\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"xsmall\"), \" (default), \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"small\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"medium\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"large\"), \". It also supports two shapes: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"round\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"square\"), \".\"), mdx(\"p\", null, \"If you need an icon for purely decorative purposes use an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Icon />\"), \" instead.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Tooltip content=\\\"Add a new file\\\">\\n  {(eventHandlers, ref) => (\\n    <IconButton\\n      label=\\\"Add File\\\"\\n      icon=\\\"Plus\\\"\\n      size=\\\"xxsmall\\\"\\n      mr=\\\"small\\\"\\n      ref={ref}\\n      {...eventHandlers}\\n    />\\n  )}\\n</Tooltip>\\n<IconButton label=\\\"Settings\\\" icon=\\\"Gear\\\" mr=\\\"small\\\" />\\n<IconButton label=\\\"Add to Favorites\\\" icon=\\\"Favorite\\\" size=\\\"small\\\" mr=\\\"small\\\" />\\n<IconButton label=\\\"Delete Look\\\" icon=\\\"Trash\\\" size=\\\"medium\\\" color=\\\"danger\\\" mr=\\\"small\\\" />\\n<IconButton label=\\\"Forward\\\" icon=\\\"CaretRight\\\" size=\\\"large\\\" shape=\\\"round\\\" mr=\\\"small\\\" outline />\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const HoverVariantButton = styled(IconButton)`\\n    transition: transform 0.5s;\\n    &:hover {\\n      transform: rotate(45deg);\\n    }\\n  `\\n  return (\\n    <HoverVariantButton\\n      label=\\\"Close\\\"\\n      icon=\\\"Close\\\"\\n      size=\\\"large\\\"\\n      outline\\n      mr=\\\"small\\\"\\n    />\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":null,"github":"Button/IconButton","propsOf":null,"status":"stable","title":"IconButton"},"tableOfContents":{}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"8e3efeef-4b44-5011-be2f-1886fa5fa2b2"}}}