{"componentChunkName":"component---src-layout-default-tsx","path":"/getting-started/","result":{"data":{"mdx":{"id":"fe2635d5-d135-5688-a05e-f7aa68106720","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Getting Started\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"To add Looker UI Components to your project, run the following command:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }), \"yarn add @looker/components\\n\")), mdx(\"p\", null, \"Import some components:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }), \"import { Card, theme } from '@looker/components'\\nimport { ThemeProvider } from 'styled-components'\\n\\n<ThemeProvider theme={theme}>\\n  <Card>{Source here...}</Card>\\n</ThemeProvider>\\n\")), mdx(\"p\", null, \"Which renders the following:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Card raised>\\n  <CardContent>\\n    <Heading fontWeight=\\\"semiBold\\\" textTransform=\\\"caps\\\">\\n      Welcome to Looker Components\\n    </Heading>\\n    <Text>Looker's component library</Text>\\n  </CardContent>\\n</Card>\\n\")), mdx(\"p\", null, \"Try editing the code above, you should see the changes appear live.\"), mdx(\"p\", null, \"These live editing blocks are found throughout our styleguide documentation, providing a space for rapid experimentation with components.\"), mdx(\"h2\", null, \"Extending\"), mdx(\"h3\", null, \"Composition\"), mdx(\"p\", null, \"Looker UI Components (and React) rely heavily on the concept of composition, where smaller components can be composed to create higher-order behavior. In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SpaceCard\"), \" example above the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Card\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CardContent\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Heading\"), \" are composed to define a what it means to display a Space object in Card format.\"), mdx(\"h3\", null, \"Extending behavior\"), mdx(\"p\", null, \"In rare cases we may not support the exact presentation or behavior necessary. Through composition and styling, most components can be extended and customized. Here's an example of a new LoggerButton that logs every click:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }), \"import React from 'react'\\nimport {\\n  Button as BaseButton,\\n  ButtonProps as BaseButtonProps,\\n} from '@looker/components'\\n\\nconst logHandler = (event: React.MouseEvent<HTMLElement>) => {\\n  logger(event.target.value)\\n}\\n\\nexport const LoggerButton: React.FC<ButtonProps> = ({ onClick, ...props }) => {\\n  let clickHandler = logHandler\\n  if (onClick !== undefined) {\\n    clickHandler = (event: React.MouseEvent<HTMLElement>) => {\\n      logHandler(event)\\n      if (onClick) onClick(event)\\n    }\\n  }\\n\\n  return (\\n    <Button onClick={clickHandler} {...props}>\\n      {props.children}\\n    </Button>\\n  )\\n}\\n\")), mdx(\"h3\", null, \"Extending styling\"), mdx(\"p\", null, \"Styling can also be extended, but care is needed to ensure you do not violate Looker's design principles.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }), \"import { Button } from '@looker/components'\\nimport styled from 'styled-components'\\n\\nconst CircularButton = styled(Button)`\\n  border-radius: 4rem;\\n`\\n\\n<CircularButton>+</CircularButton>\\n\")), mdx(\"h4\", null, \"Theme\"), mdx(\"p\", null, \"To help stay withing Looker's design principles, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/looker-open-source/lens/blob/master/packages/design-tokens/src/theme.ts\"\n  }), \"we publish a theme object\"), \", along with libraries, like Styled Components and styled-system, to easily access the theme object within components. For example, when styling components using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"styled\"), \" function, the theme object becomes part of a component's props:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }), \"import { Button } from '@looker/components'\\nimport styled from 'styled-components'\\n\\nconst DangerButton = styled(Button)`\\n  background-color: ${props => props.theme.colors.semanticColors.danger.main};\\n`\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }), \"import { Heading } from '@looker/components'\\n\\ninterface PersonTitleProps {\\n  person: Person;\\n}\\n\\nconst BasePersonTitle = ({ propsOf: PersonTitleProps }) => {\\n  return (\\n    <Heading as=\\\"h2\\\">\\n      {props.person.name} - {props.person.title}\\n    </Heading>\\n  )\\n}\\n\\nconst PersonTitle =\\n  styled <\\n  PersonTitleProps >\\n  BasePersonTitle`\\n  background-color: ${props =>\\n    props.theme.colors.semanticColors.primary.lighter};\\n  font-size: ${props => props.theme.fontSizes[5]};\\n  padding: ${props => props.spacing.large};\\n`\\n\")), mdx(\"p\", null, \"Using the Theme ensures your styling stays within the Looker design guidelines and will align in all Looker apps.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Getting Started"},"tableOfContents":{"items":[{"url":"#extending","title":"Extending","items":[{"url":"#composition","title":"Composition"},{"url":"#extending-behavior","title":"Extending behavior"},{"url":"#extending-styling","title":"Extending styling","items":[{"url":"#theme","title":"Theme"}]}]}]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"fe2635d5-d135-5688-a05e-f7aa68106720"}}}